{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport reduceCSSCalc from 'reduce-css-calc';\nimport getStringWidth from './util/getStringWidth';\nvar propTypes = {\n  scaleToFit: PropTypes.bool,\n  angle: PropTypes.number,\n  textAnchor: PropTypes.oneOf(['start', 'middle', 'end', 'inherit']),\n  verticalAnchor: PropTypes.oneOf(['start', 'middle', 'end']),\n  style: PropTypes.object,\n  innerRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  x: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  y: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  dx: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  dy: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  lineHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  capHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n  children: PropTypes.any,\n  width: PropTypes.number\n};\nvar defaultProps = {\n  x: 0,\n  y: 0,\n  dx: 0,\n  dy: 0,\n  lineHeight: '1em',\n  capHeight: '0.71em',\n  // Magic number from d3\n  scaleToFit: false,\n  textAnchor: 'start',\n  verticalAnchor: 'end' // default SVG behavior\n\n};\n\nvar Text =\n/*#__PURE__*/\nfunction (_Component) {\n  _inheritsLoose(Text, _Component);\n\n  function Text(props) {\n    var _this;\n\n    _this = _Component.call(this, props) || this;\n    _this.state = {\n      wordsByLines: []\n    };\n    return _this;\n  } // eslint-disable-next-line camelcase\n\n\n  var _proto = Text.prototype;\n\n  _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {\n    this.updateWordsByLines(this.props, true);\n  } // eslint-disable-next-line camelcase\n  ;\n\n  _proto.UNSAFE_componentWillReceiveProps = function UNSAFE_componentWillReceiveProps(nextProps) {\n    var needCalculate = this.props.children !== nextProps.children || this.props.style !== nextProps.style;\n    this.updateWordsByLines(nextProps, needCalculate);\n  };\n\n  _proto.updateWordsByLines = function updateWordsByLines(props, needCalculate) {\n    // Only perform calculations if using features that require them (multiline, scaleToFit)\n    if (props.width || props.scaleToFit) {\n      if (needCalculate) {\n        var words = props.children ? props.children.toString().split(/(?:(?!\\u00A0+)\\s+)/) : [];\n        this.wordsWithComputedWidth = words.map(function (word) {\n          return {\n            word: word,\n            width: getStringWidth(word, props.style)\n          };\n        });\n        this.spaceWidth = getStringWidth(\"\\xA0\", props.style);\n      }\n\n      var wordsByLines = this.calculateWordsByLines(this.wordsWithComputedWidth, this.spaceWidth, props.width);\n      this.setState({\n        wordsByLines: wordsByLines\n      });\n    } else {\n      this.updateWordsWithoutCalculate(props);\n    }\n  };\n\n  _proto.updateWordsWithoutCalculate = function updateWordsWithoutCalculate(props) {\n    var words = props.children ? props.children.toString().split(/(?:(?!\\u00A0+)\\s+)/) : [];\n    this.setState({\n      wordsByLines: [{\n        words: words\n      }]\n    });\n  };\n\n  _proto.calculateWordsByLines = function calculateWordsByLines(wordsWithComputedWidth, spaceWidth, lineWidth) {\n    var scaleToFit = this.props.scaleToFit;\n    return wordsWithComputedWidth.reduce(function (result, _ref) {\n      var word = _ref.word,\n          width = _ref.width;\n      var currentLine = result[result.length - 1];\n\n      if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < lineWidth)) {\n        // Word can be added to an existing line\n        currentLine.words.push(word);\n        currentLine.width += width + spaceWidth;\n      } else {\n        // Add first word to line or word is too long to scaleToFit on existing line\n        var newLine = {\n          words: [word],\n          width: width\n        };\n        result.push(newLine);\n      }\n\n      return result;\n    }, []);\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        dx = _this$props.dx,\n        dy = _this$props.dy,\n        textAnchor = _this$props.textAnchor,\n        verticalAnchor = _this$props.verticalAnchor,\n        scaleToFit = _this$props.scaleToFit,\n        angle = _this$props.angle,\n        lineHeight = _this$props.lineHeight,\n        capHeight = _this$props.capHeight,\n        innerRef = _this$props.innerRef,\n        textProps = _objectWithoutPropertiesLoose(_this$props, [\"dx\", \"dy\", \"textAnchor\", \"verticalAnchor\", \"scaleToFit\", \"angle\", \"lineHeight\", \"capHeight\", \"innerRef\"]);\n\n    var wordsByLines = this.state.wordsByLines;\n    var x = textProps.x,\n        y = textProps.y;\n    var startDy;\n\n    switch (verticalAnchor) {\n      case 'start':\n        startDy = reduceCSSCalc(\"calc(\" + capHeight + \")\");\n        break;\n\n      case 'middle':\n        startDy = reduceCSSCalc(\"calc(\" + (wordsByLines.length - 1) / 2 + \" * -\" + lineHeight + \" + (\" + capHeight + \" / 2))\");\n        break;\n\n      default:\n        startDy = reduceCSSCalc(\"calc(\" + (wordsByLines.length - 1) + \" * -\" + lineHeight + \")\");\n        break;\n    }\n\n    var transforms = [];\n\n    if (scaleToFit && wordsByLines.length > 0) {\n      var lineWidth = wordsByLines[0].width;\n      var sx = this.props.width / lineWidth;\n      var sy = sx;\n      var originX = x - sx * x;\n      var originY = y - sy * y;\n      transforms.push(\"matrix(\" + sx + \", 0, 0, \" + sy + \", \" + originX + \", \" + originY + \")\");\n    }\n\n    if (angle) {\n      transforms.push(\"rotate(\" + angle + \", \" + x + \", \" + y + \")\");\n    }\n\n    if (transforms.length > 0) {\n      textProps.transform = transforms.join(' ');\n    }\n\n    return React.createElement(\"svg\", {\n      ref: innerRef,\n      x: dx,\n      y: dy,\n      fontSize: textProps.fontSize,\n      style: {\n        overflow: 'visible'\n      }\n    }, React.createElement(\"text\", _extends({}, textProps, {\n      textAnchor: textAnchor\n    }), wordsByLines.map(function (line, index) {\n      return React.createElement(\"tspan\", {\n        x: x,\n        dy: index === 0 ? startDy : lineHeight,\n        key: index\n      }, line.words.join(' '));\n    })));\n  };\n\n  return Text;\n}(Component);\n\nText.propTypes = propTypes;\nText.defaultProps = defaultProps;\nexport default Text;","map":null,"metadata":{},"sourceType":"module"}