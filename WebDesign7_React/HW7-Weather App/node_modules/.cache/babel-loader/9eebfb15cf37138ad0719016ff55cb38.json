{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jumin\\\\my-app\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport DayForecastList from './components/DayForecastList';\nimport HourForecastList from './components/HourForecastList';\nimport { Route } from 'react-router-dom'; //import WeatherGraph from './components/WeatherGraph';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClick = weekday => {\n      this.setState({\n        selected: weekday\n      });\n    };\n\n    this.state = {\n      forecast5days: [],\n      city: '',\n      country: '',\n      selected: null,\n      error: null,\n      isLoading: false\n    };\n  }\n\n  componentDidMount() {\n    this.fetchForecast();\n  }\n\n  fetchForecast() {\n    console.log('Inside fetchForecast');\n    this.setState({\n      isLoading: true\n    });\n    axios('http://api.openweathermap.org/data/2.5/forecast?zip=10302,us&units=imperial&APPID=aee71cf56c076b9cebf44f21a8b541df').then(result => {\n      const data = result.data;\n      const forecast = data.list.map(fc => ({\n        dt: fc.dt * 1000,\n        temperature: Math.round(fc.main.temp),\n        weather: fc.weather[0].main,\n        icon: fc.weather[0].icon\n      }));\n      const forecast5days = groupByWeekday(forecast);\n      return this.setState({\n        forecast5days: forecast5days,\n        isLoading: false,\n        city: data.city.name\n      });\n    }).catch(error => this.setState({\n      error\n    }));\n  }\n\n  render() {\n    const _this$state = this.state,\n          forecast5days = _this$state.forecast5days,\n          city = _this$state.city,\n          error = _this$state.error,\n          selected = _this$state.selected,\n          isLoading = _this$state.isLoading;\n    return React.createElement(BrowserRouter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/\",\n      render: () => {\n        let result;\n        if (isLoading) result = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, \"Loading...\");else result = React.createElement(DayForecastList, {\n          list: forecast5days,\n          selected: selected,\n          onClick: this.onClick,\n          city: city,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        });\n        if (error) result = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81\n          },\n          __self: this\n        }, \"There is an error!\");\n        return result;\n      },\n      exact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/:weekday\",\n      render: props => {\n        let result;\n        const weekday = props.match.params.weekday;\n        if (isLoading) result = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }, \"Loading...\");else {\n          const day = forecast5days.find(item => item.weekday === weekday);\n          result = day ? React.createElement(\"div\", {\n            className: \"hoursGraph\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            },\n            __self: this\n          }, React.createElement(\"h1\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 99\n            },\n            __self: this\n          }, day.weekday), React.createElement(HourForecastList, {\n            list: day.forecast,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 100\n            },\n            __self: this\n          }), React.createElement(WeatherGraph, {\n            data: day.forecast,\n            width: \"800\",\n            height: \"500\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101\n            },\n            __self: this\n          })) : React.createElement(\"p\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108\n            },\n            __self: this\n          }, \"There exists no information for \".concat(weekday, \".\"));\n        }\n        return result;\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst groupByWeekday = list => {\n  var options = {\n    weekday: 'long'\n  };\n  const grouped = list.reduce((result, fc) => {\n    const date = new Date(fc.dt);\n    const weekday = new Intl.DateTimeFormat('en-US', options).format(date);\n    if (!result[weekday]) result[weekday] = [];\n    result[weekday].push(fc);\n    return result;\n  }, {});\n  return Object.keys(grouped).map(key => ({\n    weekday: key,\n    forecast: grouped[key]\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/jumin/my-app/src/App.js"],"names":["React","Component","axios","BrowserRouter","DayForecastList","HourForecastList","Route","App","constructor","props","onClick","weekday","setState","selected","state","forecast5days","city","country","error","isLoading","componentDidMount","fetchForecast","console","log","then","result","data","forecast","list","map","fc","dt","temperature","Math","round","main","temp","weather","icon","groupByWeekday","name","catch","render","match","params","day","find","item","options","grouped","reduce","date","Date","Intl","DateTimeFormat","format","push","Object","keys","key"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport DayForecastList from './components/DayForecastList';\nimport HourForecastList from './components/HourForecastList';\nimport { Route } from 'react-router-dom';\n//import WeatherGraph from './components/WeatherGraph';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      forecast5days: [],\n      city: '',\n      country: '',\n      selected: null,\n      error: null,\n      isLoading: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchForecast();\n  }\n\n  onClick = weekday => {\n    this.setState({ selected: weekday });\n  };\n\n  fetchForecast() {\n    console.log('Inside fetchForecast');\n    this.setState({ isLoading: true });\n    axios(\n      'http://api.openweathermap.org/data/2.5/forecast?zip=10302,us&units=imperial&APPID=aee71cf56c076b9cebf44f21a8b541df',\n    )\n      .then(result => {\n        const data = result.data;\n        const forecast = data.list.map(fc => ({\n          dt: fc.dt * 1000,\n          temperature: Math.round(fc.main.temp),\n          weather: fc.weather[0].main,\n          icon: fc.weather[0].icon,\n        }));\n        const forecast5days = groupByWeekday(forecast);\n        return this.setState({\n          forecast5days: forecast5days,\n          isLoading: false,\n          city: data.city.name,\n        });\n      })\n      .catch(error => this.setState({ error }));\n  }\n\n  render() {\n    const {\n      forecast5days,\n      city,\n      error,\n      selected,\n      isLoading,\n    } = this.state;\n\n    return (\n      <BrowserRouter>\n        <main>\n          <Route\n            path=\"/\"\n            render={() => {\n              let result;\n              if (isLoading) result = <p>Loading...</p>;\n              else\n                result = (\n                  <DayForecastList\n                    list={forecast5days}\n                    selected={selected}\n                    onClick={this.onClick}\n                    city={city}\n                  />\n                );\n              if (error) result = <p>There is an error!</p>;\n              return result;\n            }}\n            exact\n          />\n          <Route\n            path=\"/:weekday\"\n            render={props => {\n              let result;\n              const weekday = props.match.params.weekday;\n\n              if (isLoading) result = <p>Loading...</p>;\n              else {\n                const day = forecast5days.find(\n                  item => item.weekday === weekday,\n                );\n                result = day ? (\n                  <div className=\"hoursGraph\">\n                    <h1>{day.weekday}</h1>\n                    <HourForecastList list={day.forecast} />\n                    <WeatherGraph\n                      data={day.forecast}\n                      width=\"800\"\n                      height=\"500\"\n                    />\n                  </div>\n                ) : (\n                  <p>{`There exists no information for ${weekday}.`}</p>\n                );\n              }\n              return result;\n            }}\n          />\n        </main>\n      </BrowserRouter>\n    );\n  }\n}\n\nconst groupByWeekday = list => {\n  var options = { weekday: 'long' };\n  const grouped = list.reduce((result, fc) => {\n    const date = new Date(fc.dt);\n    const weekday = new Intl.DateTimeFormat('en-US', options).format(\n      date,\n    );\n    if (!result[weekday]) result[weekday] = [];\n    result[weekday].push(fc);\n    return result;\n  }, {});\n  return Object.keys(grouped).map(key => ({\n    weekday: key,\n    forecast: grouped[key],\n  }));\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}